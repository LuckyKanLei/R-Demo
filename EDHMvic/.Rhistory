library(EDHMvic)
library(HMtools)
wdOtherData = "./OtherData"
filePathGridID = "ct_id5.txt"
filePathLocation = "ct_location.txt"
filePathFlowDirection = "ct_direction5.txt"
filePathRiverGridID = "ct_river_id.txt"
filePathEstuaryID = "ct_estuary_id.txt"
filePathHydroStationID = "ct_hydrostation_id.txt"
filePathDEM = "ct_dem025.txt"
filePathLanduse = "ct_landuse025.txt"
filePathLanduseLib = "landuse_lib_qinguha1ji.txt"
filePathSoil = "ct_soil025.txt"
filePathSoilInterpolation = "soil_interpolation.txt"
filePathMU2Class = "MU2Class.txt"
filePathSoilLib = "soil_lib.txt"
filePathObserve = "cuntan1979-2012.txt"
setwd(wdOtherData)
###### read Grid Info include river, estuary, hydrostation infomation ######
GridID <- read.grid(filePathGridID)
infoGridRowN = attr(GridID, "nrows")  #the rows number of FLOWDRIC
infoGridColN = attr(GridID, "ncols")   #the clows number of FLOWDRIC
GridAllIDVector = array(as.matrix(GridID),c(infoGridRowN * infoGridColN))
infoGridN <- length(GridID[!is.na(GridID)])
GridGridID = as.data.frame(GridID[!is.na(GridID)])
GGID <- GridID[!is.na(GridID)]
GridLocation = read.table(filePathLocation, header = T)
FlowDirection <- read.grid(filePathFlowDirection)
RiverGridID = read.table(filePathRiverGridID) #one demesion
EstuaryID = read.table(filePathEstuaryID) #one demesion
HydroStationID = read.table(filePathHydroStationID) #one wert
GridDEM = fctClassify(read.grid(filePathDEM), GridID, 20, 0, 5) ##m
GridEvalution = tapply(GridDEM[,2] * GridDEM[,3], GridDEM[,1], sum)  ##m
id = as.data.frame(GridAllIDVector)
names(id) = "id"
GridDEM_m_Matrix = join(id,as.data.frame(cbind(id = seq(1,infoGridN,1),GridEvalution)))
library(plyr)  ## join
GridDEM_m_Matrix = join(id,as.data.frame(cbind(id = seq(1,infoGridN,1),GridEvalution)))
GridDEM4UH = array(GridDEM_m_Matrix[,2], dim = c(infoGridRowN,infoGridColN))
###### read LanduseData ###########
GridLanduse = fctClassify(read.grid(filePathLanduse), GridID, 20, 0, 5)
names(GridLanduse) = c("GridID", "Code", "Rate")
LanduseLib = read.table(filePathLanduseLib, header = T, row.names = 1)
GridLanduseParam = gridParamJion(GridLanduse, infoGridN, LanduseLib)
###### read SoilData ###########
GridSoil = fctClassify(read.grid(filePathSoil), GridID, 20, 0, 5)
# SoilMatricPotential = read.table(filePathSoilInterpolation, row.names = 1)
MU2Class = read.table(filePathMU2Class, header = T)
SoilLib = read.table(filePathSoilLib, header = T, row.names = 1)
infoSoilParamN = dim(SoilLib)[2]
MU2Class[which(MU2Class[,3] == 0),3] = MU2Class[which(MU2Class[,3] == 0),2]
names(GridSoil) = c("GridID", "MU_GLOBAL", "Rate")
GridSoilClass = join(GridSoil, MU2Class)
GridTopSoil = GridSoilClass[,c(1,4,3)]
names(GridTopSoil) = c("GridID", "Code", "Rate")
TopSoilParam = gridParamJion(GridTopSoil, infoGridN, SoilLib)
GridSubSoil = GridSoilClass[,c(1,5,3)]
names(GridSubSoil) = c("GridID", "Code", "Rate")
SubSoilParam = gridParamJion(GridSubSoil, infoGridN, SoilLib)
colnames(TopSoilParam) = paste("T_",names(SoilLib),sep = "")
colnames(SubSoilParam) = paste("S_",names(SoilLib),sep = "")
GridSoilParam = as.data.frame(cbind(TopSoilParam, SubSoilParam[,2:infoSoilParamN]))
GeoL <- list(Evalution = GridEvalution,
Location = GridLocation,
SoilParam = GridSoilParam,
LanduseParam = GridLanduseParam)
TypeGridID <- list(GridGridID = GridGridID,
RiverGridID = RiverGridID,
EstuaryID = EstuaryID,
HydroStationID = HydroStationID)
GridL <- list(TypeGridID = TypeGridID,
GridID = GridID,
FlowDirection = FlowDirection,
GridDEM = GridDEM4UH)
ClsNa <- c("VIC", "PenmanMonteith", "GreenAmpt", "Gash", "ARNO", "G2RES")
UPMethondList = list("Shipeng", "Shipeng", "Shipeng", "Shipeng")
VICInList <- InListMake_VIC("1989-1-1",
"1993-12-31",
ClsNa,
MetroList,
GeoL,
GL,
UPMethondList,
180,
35)
VICInList <- InListMake_VIC("1989-1-1",
"1993-12-31",
ClsNa,
MetroList,
GeoL,
GridL,
UPMethondList,
180,
35)
ParamterMax = c(15, 300, 600, 900, 0.9, 2.7, 0.7, 30, 9, 1,1,15,7,7,7,10,10,10,15)
ParamterMin = c(5, 50, 100, 150, 0.1, 1.3, 0.1,9, 0.1, 0.1, 0.1, 3,0.5, 0.5, 0.5 , 0.5,0.5,0.5,0.5)
ParamterModell = 0.5 * (ParamterMax + ParamterMin)
VICPaList <- PaListMake_VIC(ParamterModell)
system.time(Q <- MODELL_VIC(VICInList, VICPaList))
